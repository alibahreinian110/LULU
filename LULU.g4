<program> ::= <ft_def>+ <ft_def> ::= ( <type_def> | <fun_def> ) <type_def> ::= type id ( ‘:’ id )? ‘{’ <component>+ ‘}’ <component> ::= <access modifier>? ( <var_def> | <fun_def> ) <access_modifier> ::= private | public | protected <var_def> ::= const? <type> <var_val> ( ‘,’ <var_val> )* ‘;’ <type> ::= int | bool | float | string | id <var_val> ::= <ref> ( ‘=’ <expr>)? <fun_def> ::= ( ‘(’ <args_var> ‘)’ ‘=’ )? function id ‘(’ <args_var>? ‘)’ <block> <args_var> ::= <type> ( ‘[’ ‘]’ )* id | <args_var> ‘,’ <type> ( ‘[’ ‘]’ )* id <block> ::= ‘{’ ( <var_def> | <stmt> )* ’}’  <stmt> ::= <assign> ‘;’ | <func_call> ‘;’ | <cond_stmt> | <loop_stmt> | break ‘;’ | continue ‘;’ | destruct ( ‘[’ ‘]’ )* id ‘;’ <assign> ::= ( <var> | ‘(’ <var> ( ‘,’ <var> )* ‘)’ ) ‘=’ <expr> <var> ::= ( ( this | super ) ‘.’ )? <ref> ( ‘.’ <ref> )* <ref> ::= id ( ‘[‘ <expr> ‘]’ )* <expr> ::= <expr> <binary_op> <expr> | ‘(’ <expr> ‘)’ | <unary_op> <expr>| <const_val> | allocate <handle_call> | <func_call> | <var> | <list> | nil <func_call> ::= ( <var> ‘.’ )? <handle_call> | read ‘(‘ ‘)’ | write ‘(’ <expr> ‘)’ <list> ::= ‘[’ ( <expr> | <list> ) ( ‘,’ ( <expr> | <list> ) )* ‘]’ <handle_call> ::= id ‘(’ <params>? ‘)’ <params> ::= <expr> | <expr> ‘,’ <params> <cond_stmt> ::= if <expr> ( <block> | <stmt> ) ( else ( <block> | <stmt> ) )? |   switch <var> ‘{’ <switch_body> ’}’ <switch_body> ::= ( caseof int_const ‘:’ <block> )+ ( default ‘:’ <block> )? <loop_stmt> ::= for ( <type>? <assign> )? ‘;’ <expr> ‘;’ <assign>? <block> | while <expr> ( <block> | <stmt> ) <const_val> ::= int_const | real_const | bool_const | string_const  <unary_op> ::= ‘-’ | ‘!’ | ‘~’ <binary_op> ::= <arithmetic> | <relational> | <bitwise> | <logical> <arithmetic> ::= ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘%’ <bitwise> ::= ‘&’ | ‘|’ <logical> ::= “||” | “&&” <relational> ::= “==” | “!=” | “<=” | “>=” | ‘<’ | ‘>’